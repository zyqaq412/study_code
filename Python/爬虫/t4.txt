{
	"code":200,
	"data":{
		"categoryId":"1",
		"categoryName":"java",
		"content":"# 1.注解的作用\n​\t对Java中的类、方法、成员变量做标记、然后进行特殊处理\n\n​\t例如：JUnit框架中，标记了注解@Test的方法就可以被当作测试方法执行，而没有标记的就不能当成测试方法执行\n# 2.自定义注解\n```java\npublic @interface 注解名称{\n    public 属性名称 属性名() default 默认值;\n}\n//例如\npublic @interface book{\n    public String name() default \"hzy\";\n    public String bookName();\n}\n//使用\n//@book(bookName=\"java\")\n@book(name=\"zs\",bookName=\"java\")\npublic class a{\n  \n}\n//特殊属性\n//value属性，如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写!\n//但是如果有多个属性,  且多个属性没有默认值，那么value名称是不能省略的\npublic @interface book2{\n    public String name() default \"hzy\";\n    public String value();\n}\n@book(\"aa\")\npublic class b{\n  \n}\n\n```\n# 3元注解\n注解注解的注解\n**两个常用元注解：**\n\t@Target:约束自定义注解只能在哪些地方使用\n\t@Retention:申明注解的生命周期\n\n\n![image20221118223753748.png](https://zyqaq-blog.oss-cn-chengdu.aliyuncs.com/2023/03/26/4b420d7b56614c53a8ba82fa20a112bb.png)\n# 4.springboot 实现一个注解完成方法耗时统计\n## pom.xml依赖引入\n```xml\n\n\t\t<!-- 引入aop\n \t\t\t对自定义注解的特殊处理需要用到aop\n\t\t-->\n\t<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n\t\t<!-- 引入日志\n \t\t\t打印信息\n\t\t-->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n```\n## 自定义注解\n```java\n@Target(ElementType.METHOD)//只允许注解在方法上面\n@Retention(RetentionPolicy.RUNTIME)//注解在源码阶断，编译阶段，运行阶段都存在\npublic @interface MyLog {\n}\n```\n## aop\n```java\n@Slf4j\n@Aspect\n@Component\npublic class MyAop {\n   @Around(\"@annotation(myLog)\")\n    public Object around(ProceedingJoinPoint point, MyLog myLog) throws Throwable {\n        long begin = System.currentTimeMillis();\n        Object proceed = point.proceed();\n        long end = System.currentTimeMillis();\n        log.info(\"方法耗时：\"+(end-begin));\n        return proceed;\n    }\n}\n```\n## 测试方法\n```java\n@Service\npublic class UserService {\n   @MyLog\n    public boolean login(String username,String password ){\n        try {\n            Thread.sleep(1000);\n            System.out.println(\"登录成功\");\n            return true;\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public void add(){\n        try {\n            Thread.sleep(1000);\n            System.out.println(\"添加成功\");\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\n## 测试\n```java\n@SpringBootTest\nclass CustomAnnotationApplicationTests {\n    @Autowired\n    UserService userService;\n\n    @Test\n    void contextLoads() {\n        userService.login();\n        userService.add();\n    }\n\n}\n```\n![image20221209200855761.png](https://zyqaq-blog.oss-cn-chengdu.aliyuncs.com/2023/03/26/4d1a34f622014944bc91bffd09edfe2c.png)\nlogin方法上注解了MyLog所以打印了login 方法的耗时\n\nadd 方法 没有 注解所以没有\n## 修改代码得到更详细的信息\n```java\n@Slf4j//日志\n@Aspect//标记这是切面类\n@Component//交给spring管理\npublic class MyAop {\n\n    @Around(\"@annotation(myLog)\")\n    public Object around(ProceedingJoinPoint point, MyLog myLog) throws Throwable {\n        //获取目标 class 对象  point.getTarget() 获取目标对象\n        Class<?> aClass = point.getTarget().getClass();\n\n        //获取类名\n        String className = aClass.getName();\n\n        //获取目标方法名称\n        String methodName = point.getSignature().getName();\n\n        //方法参数\n        Object[] args = point.getArgs();\n        StringBuffer stringBuffer = new StringBuffer();\n        for (Object arg : args) {\n            stringBuffer.append(arg).append(\"\\\\\");\n        }\n        UUID uuid = UUID.randomUUID();\n        log.info(\"uuid{},类名[{}],方法名[{}],方法参数[{}]\",uuid,className,methodName,stringBuffer);\n        long begin = System.currentTimeMillis();\n        Object proceed = point.proceed();\n        long end = System.currentTimeMillis();\n        log.info(\"uuid{},类名[{}],方法名[{}],返回值[{}],方法耗[{}]\",uuid,className,methodName,proceed,(end-begin));\n        return proceed;\n    }\n\n}\n```\n日志打印时间----日志级别-----线程id--------线程名称-------执行的类名\n![image20221209202408245.png](https://zyqaq-blog.oss-cn-chengdu.aliyuncs.com/2023/03/26/886aafee6aaa4108b7e5957f9856fcb0.png)\n日志信息\n![image20221209202433510.png](https://zyqaq-blog.oss-cn-chengdu.aliyuncs.com/2023/03/26/53083178bd6b4cad9a8d951cf73a9069.png)",
		"createTime":"2023-03-01 23:36:00",
		"id":"19",
		"isComment":"0",
		"title":"注解基础使用",
		"viewCount":"479"
	},
	"msg":"操作成功"
}